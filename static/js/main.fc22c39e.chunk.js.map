{"version":3,"sources":["Components/layout/Header.js","Components/TodoItem.js","Components/Todos.js","Components/AddTodo.js","Components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","backgroundColor","fontFamily","fontSize","color","textAlign","padding","borderTopLeftRadius","borderTopRightRadius","linkStyle","textDecoration","cursor","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","float","Todos","todos","map","key","React","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc22c39e.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom';\n\nexport function Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>Honey-Do's</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    backgroundColor: '#55a',\n    fontFamily: 'cursive',\n    fontSize: 'x-large',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px',\n    borderTopLeftRadius: '40px',\n    borderTopRightRadius: '40px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none',\n    cursor: 'pointer'\n}\n\nexport default Header;\n","import React, { Component } from 'react'\nimport {PropTypes} from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            backgroundColor: '#bbd',\n            padding: '18px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type='checkbox' onChange={this.props.markComplete.bind(this, id)} /> {' '}\n                    {title}\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}\n\nconst btnStyle = {\n    backgroundColor: '#aa5566',\n    color: '#fff',\n    border: 'none',\n    padding: '5px',\n    cursor: 'pointer',\n    float: 'right'\n}\n\nexport default TodoItem\n","import React from 'react';\nimport {TodoItem} from './TodoItem';\nimport {PropTypes} from 'prop-types';\n\nexport class Todos extends React.Component {\n    render () {\n    return this.props.todos.map((todo) => {\n        return <TodoItem key={todo.id} todo={todo} \n        markComplete={this.props.markComplete}\n        delTodo={this.props.delTodo}/>\n    });\n  }\n}\n\n// PropTypes\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}\n\nexport default Todos;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\n    state = {\n        title: ''\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({ title: '' });\n    }\n\n    render() {\n        return (\n           <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n            <input \n                type=\"text\" \n                name=\"title\"\n                style={{flex: \"10\", padding: \"5px\"}}\n                placeholder=\"Add Todo ...\"\n                value={this.state.title}\n                onChange={this.onChange}\n            />\n            <input \n                type=\"submit\"\n                value=\"Submit\"\n                className=\"btn\"\n                style={{flex: '1'}}\n            />\n               \n           </form>\n        )\n    }\n}\n\n// PropTypes\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired,\n}\n\nexport default AddTodo;\n","import React from 'react'\n\nfunction About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0</p>\n        </React.Fragment>\n    )\n}\n\n\nexport default About;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './Components/layout/Header';\nimport Todos from './Components/Todos';\nimport AddTodo from './Components/AddTodo';\nimport About from './Components/pages/About';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({todos: res.data}))\n  }\n\n  //Toggle complete\n  markComplete = (id) => { \n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      } \n      return todo;\n    })});\n  }\n\n  //Delete Todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }));\n  }\n\n  //Add Todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', \n    { \n      title: title,\n      completed: false\n    })\n      .then(res => this.setState({ todos: [...this.state.todos, res.data]}));\n  }\n\n  render () {\n    return (\n      <Router>\n        <div className=\"App-header\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo}/>\n                <Todos todos={this.state.todos} markComplete={this.markComplete}\n                delTodo={this.delTodo}/>\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}